{
  "hash": "fab7483249dfe94b781b7cb4f3a07190",
  "result": {
    "markdown": "---\ntitle: \"Dataframe gymnastics in R, Pyhon and Julia\"\ndraft: true\nfilters:\n    - grouped-tabsets\ndescription: |\n    A gallery of data frame opearations in the following tools\n\n    - R: tidyverse, data.table\n    - Python: pandas, dask\n    - Julia: DataFrames.jl\nknitr:\n    opts_chunk:\n          cache: true\n          collapse: false\n---\n\n\n\n\n\n\n\n\n## Introduction\n\nI am using R 4.2.0, Python 3.10.6 and Julia 1.8.0\n\n::: {.panel-tabset}\n\n### R\nTidyverse packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidyr)\n```\n:::\n\n\ndata.table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\n```\n:::\n\n\nVersions of some core tidyverse packages in this post.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_61ef36eb72056b85ded476f6af4af137'}\n\n```{.r .cell-code}\npurrr::map(c(\"dplyr\", \"tidyr\", \"purrr\"), packageVersion)\n#> [[1]]\n#> [1] '1.0.10'\n#> \n#> [[2]]\n#> [1] '1.2.1'\n#> \n#> [[3]]\n#> [1] '0.3.4'\n```\n:::\n\n\nVersion of data.table\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_b74de57d2e86c07ccf03dc99f906f3ed'}\n\n```{.r .cell-code}\npackageVersion(\"data.table\")\n#> [1] '1.14.3'\ngetDTthreads()\n#> [1] 5\n```\n:::\n\n\n\n### Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport dask as dd\n```\n:::\n\n\nPackage versions\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-8_4d399f90241799a7f33296809a1b6f56'}\n\n```{.python .cell-code}\npd.__version__\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> '1.3.5'\n```\n:::\n\n```{.python .cell-code}\ndd.__version__\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> '2022.01.0'\n```\n:::\n:::\n\n\n\n### Julia\n\n\n::: {.cell}\n\n```{.julia .cell-code}\nusing DataFrames\nusing Pkg\nPkg.status(\"DataFrames\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Status `~/.julia/environments/v1.8/Project.toml`\n#> ⌃ [a93c6f00] DataFrames v1.3.4\n#> Info Packages marked with ⌃ have new versions available\n```\n:::\n:::\n\n\n\n:::\n\n\n::: {.cell}\n\n:::\n\n\n## Reading data\n\n::: {.column-margin}\n\nThe [vroom](https://vroom.r-lib.org/) package has faster reading speed (about 30 times) compared to `readr::read_csv()`. I did not use vroom here becauase the way it reads data will have a performance impact on later operations, therefore it's a bit unfair to compare it with other tools.\n\n:::\n\n\n\nThe dataset to be imported . This is a csv file of 336776 rows and 19 columns, and takes up about 29.6 MB on disk.\n\n::: {.panel-tabset}\n\n### tidyverse\n\n\n::: {.cell hash='index_cache/html/tidy-read_1caeb157d5319147766611e3b1c96e7b'}\n\n```{.r .cell-code}\nflights_df <- readr::read_csv(\"flights.csv\")\nhead(flights_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 6 × 19\n#>    year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n#>   <dbl> <dbl> <dbl>    <dbl>       <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <chr>  \n#> 1  2013     1     1      517         515       2     830     819      11 UA     \n#> 2  2013     1     1      533         529       4     850     830      20 UA     \n#> 3  2013     1     1      542         540       2     923     850      33 AA     \n#> 4  2013     1     1      544         545      -1    1004    1022     -18 B6     \n#> 5  2013     1     1      554         600      -6     812     837     -25 DL     \n#> 6  2013     1     1      554         558      -4     740     728      12 UA     \n#> # … with 9 more variables: flight <dbl>, tailnum <chr>, origin <chr>,\n#> #   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#> #   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#> #   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n### data.table\n\n\n::: {.cell hash='index_cache/html/dt-read_d574dff2315aecb9a3e56e113ca20605'}\n\n```{.r .cell-code}\nflights_dt <- data.table::fread(\"flights.csv\")\nhead(flights_dt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>    <int> <int> <int>    <int>          <int>     <int>    <int>          <int>\n#> 1:  2013     1     1      517            515         2      830            819\n#> 2:  2013     1     1      533            529         4      850            830\n#> 3:  2013     1     1      542            540         2      923            850\n#> 4:  2013     1     1      544            545        -1     1004           1022\n#> 5:  2013     1     1      554            600        -6      812            837\n#> 6:  2013     1     1      554            558        -4      740            728\n#>    arr_delay carrier flight tailnum origin   dest air_time distance  hour\n#>        <int>  <char>  <int>  <char> <char> <char>    <int>    <int> <int>\n#> 1:        11      UA   1545  N14228    EWR    IAH      227     1400     5\n#> 2:        20      UA   1714  N24211    LGA    IAH      227     1416     5\n#> 3:        33      AA   1141  N619AA    JFK    MIA      160     1089     5\n#> 4:       -18      B6    725  N804JB    JFK    BQN      183     1576     5\n#> 5:       -25      DL    461  N668DN    LGA    ATL      116      762     6\n#> 6:        12      UA   1696  N39463    EWR    ORD      150      719     5\n#>    minute           time_hour\n#>     <int>              <POSc>\n#> 1:     15 2013-01-01 10:00:00\n#> 2:     29 2013-01-01 10:00:00\n#> 3:     40 2013-01-01 10:00:00\n#> 4:     45 2013-01-01 10:00:00\n#> 5:      0 2013-01-01 11:00:00\n#> 6:     58 2013-01-01 10:00:00\n```\n:::\n:::\n\n\n### pandas\n\n\n::: {.cell hash='index_cache/html/pd-read_c9a243e51b93f95d00a77dbfd6b88a43'}\n\n```{.python .cell-code}\ndf = pd.read_csv(\"flights.csv\")\ndf.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>    year  month  day  dep_time  ...  distance  hour  minute             time_hour\n#> 0  2013      1    1     517.0  ...      1400     5      15  2013-01-01T10:00:00Z\n#> 1  2013      1    1     533.0  ...      1416     5      29  2013-01-01T10:00:00Z\n#> 2  2013      1    1     542.0  ...      1089     5      40  2013-01-01T10:00:00Z\n#> 3  2013      1    1     544.0  ...      1576     5      45  2013-01-01T10:00:00Z\n#> 4  2013      1    1     554.0  ...       762     6       0  2013-01-01T11:00:00Z\n#> \n#> [5 rows x 19 columns]\n```\n:::\n:::\n\n\n### DataFrames.jl\n\n\n::: {.cell hash='index_cache/html/df-read_0edfd8690fdd7f00896f96f8c0e8543f'}\n\n```{.julia .cell-code}\nusing CSV\ndf = CSV.read(\"flights.csv\", DataFrame)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 336776×19 DataFrame\n#>     Row │ year   month  day    dep_time  sched_dep_time  dep_delay  arr_time   ⋯\n#>         │ Int64  Int64  Int64  String7   Int64           String7    String7    ⋯\n#> ────────┼───────────────────────────────────────────────────────────────────────\n#>       1 │  2013      1      1  517                  515  2          830        ⋯\n#>       2 │  2013      1      1  533                  529  4          850\n#>       3 │  2013      1      1  542                  540  2          923\n#>       4 │  2013      1      1  544                  545  -1         1004\n#>       5 │  2013      1      1  554                  600  -6         812        ⋯\n#>       6 │  2013      1      1  554                  558  -4         740\n#>       7 │  2013      1      1  555                  600  -5         913\n#>       8 │  2013      1      1  557                  600  -3         709\n#>    ⋮    │   ⋮      ⋮      ⋮       ⋮            ⋮             ⋮         ⋮       ⋱\n#>  336770 │  2013      9     30  2349                2359  -10        325        ⋯\n#>  336771 │  2013      9     30  NA                  1842  NA         NA\n#>  336772 │  2013      9     30  NA                  1455  NA         NA\n#>  336773 │  2013      9     30  NA                  2200  NA         NA\n#>  336774 │  2013      9     30  NA                  1210  NA         NA         ⋯\n#>  336775 │  2013      9     30  NA                  1159  NA         NA\n#>  336776 │  2013      9     30  NA                   840  NA         NA\n#>                                               12 columns and 336761 rows omitted\n```\n:::\n:::\n\n\n:::\n\n## Comparison\n\nI have stored the execution time for each chunk in an object `all_times`, which can be converted as a data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_times <- all_times |>\n    purrr::transpose() |>\n    purrr::map(unlist) |>\n    as.data.frame()\n\nall_times\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> data frame with 0 columns and 0 rows\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}