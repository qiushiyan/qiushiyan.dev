{
  "hash": "91318415df5e73f6a6d92f60d1d83e6b",
  "result": {
    "markdown": "---\ntitle: Reactive Patterns in Python with RxPY\ndate: '2022-02-20'\ncategories: Python\ndescription: |\n  Working with data streams in Python with the RxPY library\nimage: 'https://avatars.githubusercontent.com/u/6407041?s=200&v=4'\n---\n\n## Essential Reactive Concepts\n\n> An **Observable** is the core type in ReactiveX. It serially pushes items, known as emissions, through a series of **operators** until it finally arrives at an **Observer**, where they are consumed.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport reactivex as rx\nimport reactivex.operators as op\nimport re\nfrom reactivex import from_iterable\n```\n:::\n\n\n## Reading files\n\n\n### Building a word counter\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef words_from_line(line: str):\n    return from_iterable(re.split(r'\\W+', line))\n\ndef word_counter(filename: str, stop_words: [str] = None):\n    if stop_words is None:\n        stop_words = [\"the\", \"of\", \"and\", \"to\", \"is\", \"that\", \"it\", \"as\", \"a\", \"are\", \"s\", \"in\", \"for\" \"was\"]\n\n    f = open(filename)\n    result = []\n\n    subscription = from_iterable(f) \\\n        .pipe(\n            op.filter(lambda line: line != ''),\n            op.flat_map(words_from_line),\n            op.filter(lambda word: word != \"\" and word.lower() not in stop_words),\n            op.group_by(lambda word: word.lower()),\n            op.flat_map(lambda group: group.pipe(\n                op.count(),\n                op.map(lambda ct: (group.key, ct))\n            )),\n        ) \\\n        .subscribe(\n            on_next = lambda x: result.append(x),\n            on_completed = lambda: f.close()\n        )\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result\n\ntop_words = word_counter(\"news.txt\")\ntop_words[:10]\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n[('aid', 10),\n ('said', 10),\n ('was', 7),\n ('damage', 6),\n ('asia', 6),\n ('world', 6),\n ('tourism', 6),\n ('for', 6),\n ('has', 6),\n ('also', 6)]\n```\n:::\n:::\n\n\n## Data Fetching\n\n\n## Integrating with Other Straming APIs\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport time\n\nstarted_at = time.time() # Time in seconds\nend_at = started_at + 5 # last 5 seconds\nob = rx.interval(1)\nsub = ob.pipe(op.take_while(lambda _: time.time() < end_at))\nsub.subscribe(lambda i: print(i))\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n<reactivex.disposable.disposable.Disposable at 0x117e677f0>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}