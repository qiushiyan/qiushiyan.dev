---
title: "Dataframe gymnastics in R, Pyhon and Julia"
draft: true
description: |
    A gallery of data frame opearations in the following tools

    - R: tidyverse, data.table
    - Python: pandas, dask
    - Julia: DataFrames.jl
knitr:
    opts_chunk:
          collapse: false
          eval: false
---

```{r}
#| include: false
flights <- nycflights13::flights
```

```{r}
#| include: false

vroom::vroom_write(flights, "flights.csv", delim = ",")
repo <- "qiushiyan/qiushiyan.dev"
tag <- "flights"
if (!tag %in% piggyback::pb_list(repo)$tag) {
  piggyback::pb_new_release(repo, tag)
}

withr::with_file(
  "flights.csv",
  {
    vroom::vroom_write(flights, "flights.csv", delim = ",")
    piggyback::pb_upload("flights.csv", repo, tag = tag)
  }
)
```



## Introduction

I am using R 4.2.0, Python 3.10.6 and Julia 1.8.0

::: {.panel-tabset}

### R
Tidyverse packages

```{r}
#| cache: false
library(dplyr)
library(tidyr)
```

data.table

```{r}
#| cache: false
library(data.table)
```

Versions of some core tidyverse packages in this post.

```{r}
#| collapse: true
purrr::map(c("dplyr", "tidyr", "purrr"), packageVersion)
```

Version of data.table

```{r}
#| collapse: true
packageVersion("data.table")
getDTthreads()
```


### Python

```{python}
#| cache: false
import pandas as pd
import dask as dd
```

Package versions

```{python}
pd.__version__
dd.__version__
```


### Julia

```{julia}
#| cache: false
using DataFrames
using Pkg
Pkg.status("DataFrames")
```


:::

```{r}
#| echo: false
#| cache: false
all_times <- list() # store the time for each chunk
knitr::knit_hooks$set(time_it = local({
  now <- NULL
  tool <- NULL
  op <- NULL
  function(before, options) {
    should_include <- !startsWith(options$label, "unnamed")
    if (should_include) {
      if (before) {
        label <- unlist(strsplit(options$label, "-"))
        tool <<- label[1]
        op <<- label[2]
        now <<- Sys.time()
      } else {
        res <- difftime(Sys.time(), now)
        all_times[[length(all_times) + 1]] <<- list(tool = tool, op = op, time = as.numeric(res))
      }
    }
  }
}))

knitr::opts_chunk$set(time_it = TRUE)
```

## Reading data

::: {.column-margin}

The [vroom](https://vroom.r-lib.org/) package has faster reading speed (about 30 times) compared to `readr::read_csv()`. I did not use vroom here becauase the way it reads data will have a performance impact on later operations, therefore it's a bit unfair to compare it with other tools.

:::



The dataset to be imported . This is a csv file of `r nrow(flights)` rows and `r ncol(flights)` columns, and takes up about 29.6 MB on disk.

::: {.panel-tabset}

### tidyverse

```{r tidy-read}
#| label: tidy-read
flights_df <- readr::read_csv("flights.csv")
head(flights_df)
```

### data.table

```{r}
#| label: dt-read
flights_dt <- data.table::fread("flights.csv")
head(flights_dt)
```

### pandas

```{python}
#| label: pd-read
df = pd.read_csv("flights.csv")
df.head()
```

### DataFrames.jl

```{julia df-read}
#| label: df-read
using CSV
df = CSV.read("flights.csv", DataFrame)
```

:::

## Comparison

I have stored the execution time for each chunk in an object `all_times`, which can be converted as a data frame.

```{r}
#| cache: false
all_times <- all_times |>
    purrr::transpose() |>
    purrr::map(unlist) |>
    as.data.frame()

all_times
```
